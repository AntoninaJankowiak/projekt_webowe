//lepiej sformatowane będą w osobnym pliku
//te funkcje zwracają tylko string z gotowym zapytaniem
function query_getTypesOfPokemon(id: number): string{
    return `WITH CTE AS( SELECT pn.global_id, pn.name, (substr(t1.name,1,1)||lower(substr(t1.name,2))) AS type1, (substr(t2.name,1,1)||lower(substr(t2.name,2))) AS type2, ROW_NUMBER() OVER(PARTITION BY pn.global_id ORDER BY t1.name) as rn FROM pokemon_national pn JOIN pokemon_type pt1 ON pn.global_id=pt1.pokemon JOIN type t1 on pt1.type = t1.id LEFT JOIN pokemon_type pt2 ON pn.global_id=pt2.pokemon AND pt1.type != pt2.type LEFT JOIN type t2 on pt2.type = t2.id WHERE pn.global_id=${id} ) SELECT global_id, name, type1, type2 FROM CTE WHERE rn = 1`
}
function query_evolutionChain(id: number): string{
    return 'WITH RECURSIVE evolution_chain(pokemonId, pokemon, sprite, evolvesTo, evolvesToName, evolutionMethods, generations, sprite1) AS ( SELECT e.pokemonId, n.name, (SELECT s.sprite FROM pokemon_sprite s WHERE s.generation IS NULL AND s.pokemon_id=e.pokemonId) AS \'sprite\', e.evolvesTo, n1.name, rtrim( CASE WHEN level IS NOT NULL THEN \'level \' || level || \' and \' ELSE \'\' END || CASE WHEN stone IS NOT NULL THEN \'use \' || (SELECT name FROM items WHERE id=stone) || \' and \' ELSE \'\' END || CASE WHEN nightimeNeeded IS NOT NULL THEN \'Nighttime\' || \' and \' ELSE \'\' END || CASE WHEN dayTimeneeded IS NOT NULL THEN \'Daytime\' || \' and \' ELSE \'\' END || CASE WHEN trade IS NOT NULL THEN \'trade: \' || trade || \' and \' ELSE \'\' END || CASE WHEN hold_item IS NOT NULL THEN \'hold \' || (SELECT name FROM items WHERE id=hold_item) || \' and \' ELSE \'\' END || CASE WHEN other_requirement IS NOT NULL THEN \'\' || other_requirement || \' and \' ELSE \'\' END || CASE WHEN move_learnt IS NOT NULL THEN \'after learning: \' || (SELECT name FROM moves WHERE id=move_learnt) || \' and \' ELSE \'\' END || CASE WHEN pokemon_in_party IS NOT NULL THEN \'pokemon in party: \' || (SELECT pn.name FROM pokemon_national pn WHERE pn.global_id=pokemon_in_party) || \' and \' ELSE \'\' END || CASE WHEN male_only IS NOT NULL THEN \'male only: \' || male_only || \' and \' ELSE \'\' END || CASE WHEN female_only IS NOT NULL THEN \'female only: \' || female_only || \' and \' ELSE \'\' END || CASE WHEN highFriendship IS NOT NULL THEN \'High Friendship\' || \' and \' ELSE \'\' END || CASE WHEN magneticfield IS NOT NULL THEN \'magnetic field: \' || magneticfield ELSE \'\' END , \' and\') AS evolutionMethods, CASE WHEN e.generation IS NULL THEN \'\' ELSE e.generation END, CASE WHEN (SELECT s.sprite FROM pokemon_sprite s WHERE s.generation IS NULL AND s.pokemon_id=e.evolvesTo) IS NULL THEN \'no image available\' ELSE (SELECT s.sprite FROM pokemon_sprite s WHERE s.generation IS NULL AND s.pokemon_id=e.evolvesTo) END FROM pokemon_evolving e JOIN pokemon_national n ON e.pokemonId = n.global_id JOIN pokemon_national n1 ON e.evolvesTo = n1.global_id JOIN pokemon_type pt ON n.global_id=pt.pokemon JOIN type t on pt.type = t.id JOIN (SELECT pt.pokemon, COUNT(pt.type) as qt FROM pokemon_type pt GROUP BY pt.pokemon) typeQt ON n.global_id = typeQt.pokemon WHERE e.pokemonId = ${id} UNION SELECT e.pokemonId, n.name, (SELECT s.sprite FROM pokemon_sprite s WHERE s.generation IS NULL AND s.pokemon_id=e.pokemonId) AS \'sprite\', e.evolvesTo, n1.name, rtrim( CASE WHEN level IS NOT NULL THEN \'level \' || level || \' and \' ELSE \'\' END || CASE WHEN stone IS NOT NULL THEN \'use \' || (SELECT name FROM items WHERE id=stone) || \' and \' ELSE \'\' END || CASE WHEN nightimeNeeded IS NOT NULL THEN \'Nighttime\' || \' and \' ELSE \'\' END || CASE WHEN dayTimeneeded IS NOT NULL THEN \'Daytime\' || \' and \' ELSE \'\' END || CASE WHEN trade IS NOT NULL THEN \'trade: \' || trade || \' and \' ELSE \'\' END || CASE WHEN hold_item IS NOT NULL THEN \'hold \' || (SELECT name FROM items WHERE id=hold_item) || \' and \' ELSE \'\' END || CASE WHEN other_requirement IS NOT NULL THEN \'\' || other_requirement || \' and \' ELSE \'\' END || CASE WHEN move_learnt IS NOT NULL THEN \'after learning: \' || (SELECT name FROM moves WHERE id=move_learnt) || \' and \' ELSE \'\' END || CASE WHEN pokemon_in_party IS NOT NULL THEN \'pokemon in party: \' || (SELECT pn.name FROM pokemon_national pn WHERE pn.global_id=pokemon_in_party) || \' and \' ELSE \'\' END || CASE WHEN male_only IS NOT NULL THEN \'male only: \' || male_only || \' and \' ELSE \'\' END || CASE WHEN female_only IS NOT NULL THEN \'female only: \' || female_only || \' and \' ELSE \'\' END || CASE WHEN highFriendship IS NOT NULL THEN \'High Friendship\' || \' and \' ELSE \'\' END || CASE WHEN magneticfield IS NOT NULL THEN \'magnetic field: \' || magneticfield ELSE \'\' END , \' and\') AS evolutionMethods, CASE WHEN e.generation IS NULL THEN \'\' ELSE e.generation END, CASE WHEN (SELECT s.sprite FROM pokemon_sprite s WHERE s.generation IS NULL AND s.pokemon_id=e.evolvesTo) IS NULL THEN \'no image available\' ELSE (SELECT s.sprite FROM pokemon_sprite s WHERE s.generation IS NULL AND s.pokemon_id=e.evolvesTo) END FROM pokemon_evolving e JOIN pokemon_national n ON e.pokemonId = n.global_id JOIN pokemon_national n1 ON e.evolvesTo = n1.global_id JOIN evolution_chain ec ON e.pokemonId = ec.evolvesTo ) SELECT * FROM evolution_chain'
}
function query_getBasicPokemonData(id: number): string{
    return `SELECT global_id, name, coalesce(pageDescription, '<description coming soon>') AS 'description', species, height, weight, maleRatio, femaleRatio, base_friendship, special FROM pokemon_national WHERE global_id=${id}`
}
function query_getInGamePokemonIds(id: number): string{
    return `SELECT pg.localPokedexNumber, p.description FROM pokemon_national pn JOIN pokemon_game pg on pn.global_id = pg.pokemonId JOIN pokedex p on pg.pokedexId = p.pokedexId WHERE global_id=${id};`
}
function query_getNumberOfTypes(id: number): string{
    return `SELECT COUNT(t.type) as 'tq' FROM pokemon_national p JOIN pokemon_type t ON p.global_id=t.pokemon WHERE global_id=${id};`
}
function query_getTypeDefenses(id: number, types: number): string{
    return types===1? `SELECT pn.name, te.attack_type, te.multi FROM pokemon_national pn JOIN pokemon_type pt ON pn.global_id=pt.pokemon JOIN type_effectivenes te ON pt.type=te.defense_type WHERE global_id=${id} AND te.gens LIKE '%9'`
    :types===2? `WITH CTE AS (SELECT DISTINCT pn.name as 'name1', te1.attack_type as 'attack', te1.defense_type as 'defense', te2.defense_type, te1.multi*te2.multi as 'multi1', ROW_NUMBER() OVER (PARTITION BY pn.name, te1.attack_type ORDER BY te1.defense_type, te2.defense_type) as rn FROM pokemon_national pn JOIN pokemon_type pt1 ON pn.global_id=pt1.pokemon JOIN type_effectivenes te1 ON pt1.type=te1.defense_type JOIN pokemon_type pt2 ON pn.global_id=pt2.pokemon JOIN type_effectivenes te2 ON pt2.type=te2.defense_type AND te2.attack_type=te1.attack_type AND te1.defense_type!=te2.defense_type WHERE global_id=${id} AND te1.gens LIKE '%9' AND te2.gens LIKE '%9') SELECT name1, attack, multi1 FROM CTE c WHERE rn = 1 ORDER BY attack;`
    :`Incorrect number of types, it should be 1 or 2.`
}
function query_getTypeAttacks(id: number, types:number): string{
    return ``
}